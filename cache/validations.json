{
  "version": "3.2",
  "log": [
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "ab93b562a5635a1329bcbaac2f6b4a904abacba2d5ba5f5bb1a06339f70905ba",
          "withoutMetadata": "e44a96ee15e80492ec2c0d472a6ecd023552f36bfa33894e1d55d95fb4c2c28a",
          "linkedWithoutMetadata": "e44a96ee15e80492ec2c0d472a6ecd023552f36bfa33894e1d55d95fb4c2c28a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "updateStakeBeforeStart()",
          "claimRewards()",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getUserTVL(address)",
          "getWinners(string)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4184",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3566",
              "src": "contracts/BetTokens.sol:54"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4184": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)3566": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:12",
        "version": {
          "withMetadata": "b2030c73a89dd92e1492fbda5debd146c5d389718b4fbdd66403ce9ac59f99cf",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "092c268a08d522921c9bdf5db19261ab1b136583a0ef6db1a9f5e275bcafe33e",
          "withoutMetadata": "e44a96ee15e80492ec2c0d472a6ecd023552f36bfa33894e1d55d95fb4c2c28a",
          "linkedWithoutMetadata": "e44a96ee15e80492ec2c0d472a6ecd023552f36bfa33894e1d55d95fb4c2c28a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "updateStakeBeforeStart()",
          "claimRewards()",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getUserTVL(address)",
          "getWinners(string)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4184",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3566",
              "src": "contracts/BetTokens.sol:54"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4184": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)3566": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "574a6862273b189ac21a1675d84f7b4af3bca209e7c9a0d85931161768b3a5ce",
          "withoutMetadata": "8742bc398ff81956397ea32921af57e5ace41bc57a026b85598d4b974650a4b9",
          "linkedWithoutMetadata": "8742bc398ff81956397ea32921af57e5ace41bc57a026b85598d4b974650a4b9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "updateStakeBeforeStart()",
          "claimRewards()",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getUserTVL(address)",
          "getWinners(string)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4184",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3566",
              "src": "contracts/BetTokens.sol:54"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4184": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)3566": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "4d8b3a7d29da9098305b847cec95850872e8442424f24a4ae7549b81716c1f37",
          "withoutMetadata": "d1e989525e4d5355bd682f875c8e2122cc595b58824e802221f4dbd15dd32a79",
          "linkedWithoutMetadata": "d1e989525e4d5355bd682f875c8e2122cc595b58824e802221f4dbd15dd32a79"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(string)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4205",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4205": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "854bc9aebf3a211767310650e4b711387e6cd8f8b0f34563efecd0c35816f4b0",
          "withoutMetadata": "39fa270af02ed15133ca09a075f9e2497e6ae769b85d577010a7d4b1d43762a4",
          "linkedWithoutMetadata": "39fa270af02ed15133ca09a075f9e2497e6ae769b85d577010a7d4b1d43762a4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(string)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4258",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4258": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "0d4c7e4aca53a96201c2ec31d2bdb5747e594135c9bb749061329d19915423bf",
          "withoutMetadata": "71307550c49d38b7fa0770a280b4fe69c69b06cdf6b67ed8d4304111acb25bb8",
          "linkedWithoutMetadata": "71307550c49d38b7fa0770a280b4fe69c69b06cdf6b67ed8d4304111acb25bb8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(string)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4256",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4256": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "233f1338d7ddf7e8cc6967fd6d72721ef7dfdbfdae27997005754a9dc25e4e04",
          "withoutMetadata": "3c39943330f8e7ceaed092ac57875213afaf0f55d859e9531e804ef03d97b4af",
          "linkedWithoutMetadata": "3c39943330f8e7ceaed092ac57875213afaf0f55d859e9531e804ef03d97b4af"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(string)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4252",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4252": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "c8a2931aa998e6cc8ee90a1db6b87c0714ff11528cd0d5a6b2f4975ac38c69bf",
          "withoutMetadata": "3ed34b576b1ecb4e246587ceab3e6e47d5cf352a452487395c95ff25c6b53911",
          "linkedWithoutMetadata": "3ed34b576b1ecb4e246587ceab3e6e47d5cf352a452487395c95ff25c6b53911"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(string)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4235",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4235": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "9302f3f05b7d3d83579c7f9e2e17cc0c63f12a92519333c819b235de0116b373",
          "withoutMetadata": "5b17abbbf13a21370d0223b42c3add2e06d0858b371bf82f7e6a75e3af813845",
          "linkedWithoutMetadata": "5b17abbbf13a21370d0223b42c3add2e06d0858b371bf82f7e6a75e3af813845"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(string)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4228",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4228": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "7dc8638b659a6e3c89864e729a0d5aa10895bd047f71e6bbe7d691030c939677",
          "withoutMetadata": "e511600280d93ceb7898a3bc3db1a7524fe506a0b18c480b2c6ce4040204c186",
          "linkedWithoutMetadata": "e511600280d93ceb7898a3bc3db1a7524fe506a0b18c480b2c6ce4040204c186"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(string)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4220",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4220": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "bede63f9439e643a9bc6b991eb5334148640d6d4b087660f31aaaf7a8c227485",
          "withoutMetadata": "e32a71397d28956388b2bd5349ef94de1932aef7a3c887cd8c8b958cd20db934",
          "linkedWithoutMetadata": "e32a71397d28956388b2bd5349ef94de1932aef7a3c887cd8c8b958cd20db934"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4163",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4163": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "135bd0e68d66aafec4d0163cf4ebc31a5684893c4f3a6882409ed0ee4fc4fe88",
          "withoutMetadata": "e9079084d86b1c720e9c21f304edd6d8e2a1f6413595cf151eba4f1516a63e1d",
          "linkedWithoutMetadata": "e9079084d86b1c720e9c21f304edd6d8e2a1f6413595cf151eba4f1516a63e1d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4166",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4166": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "1e6b7cbdad85ae4deb5de6e8654e0800cad5e95aeefc3b72a61aa1be7da71162",
          "withoutMetadata": "70a021f2501375834f155b914674396a69520415fc62fd21a96f532f19d2663d",
          "linkedWithoutMetadata": "70a021f2501375834f155b914674396a69520415fc62fd21a96f532f19d2663d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4166",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4166": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "93438694f633c443a9c1f5949316c78b02645e8f75138f26f705748c709b1e78",
          "withoutMetadata": "f7dd62b82142b8664ee4fc2357154f3f4078ea2af6acfd74647c77982d277c7d",
          "linkedWithoutMetadata": "f7dd62b82142b8664ee4fc2357154f3f4078ea2af6acfd74647c77982d277c7d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4159",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4159": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "e22a0600eedec65f6c955560ac1bbab5317a44785e2be93e2c9a97db2997704f",
          "withoutMetadata": "fdcf11e56d68fd0115a9b3a6a1b4cce2866efe6e445facbdedd6a61d60245d49",
          "linkedWithoutMetadata": "fdcf11e56d68fd0115a9b3a6a1b4cce2866efe6e445facbdedd6a61d60245d49"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4161",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4161": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "090838566a17a89687796f067b324acbd8581278db4d4b18433e321db0a2c077",
          "withoutMetadata": "ff6b60da7c797c87a8e75b81808b4547323658ae70286451985f0a7041e855c6",
          "linkedWithoutMetadata": "ff6b60da7c797c87a8e75b81808b4547323658ae70286451985f0a7041e855c6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4161",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4161": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "93438694f633c443a9c1f5949316c78b02645e8f75138f26f705748c709b1e78",
          "withoutMetadata": "f7dd62b82142b8664ee4fc2357154f3f4078ea2af6acfd74647c77982d277c7d",
          "linkedWithoutMetadata": "f7dd62b82142b8664ee4fc2357154f3f4078ea2af6acfd74647c77982d277c7d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4159",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4159": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "b506e1b5a4ce961d664e29ad93e6b684dece0fad7d6b5a03edefd09761d7a8bc",
          "withoutMetadata": "aacc4497352b6f6beef6e5fdb6d28a57d594c44f650f625d65e5bddcdf3b3e03",
          "linkedWithoutMetadata": "aacc4497352b6f6beef6e5fdb6d28a57d594c44f650f625d65e5bddcdf3b3e03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4165",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4165": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "3bf0e9c101655c199a720844d234a5267a9f39413888f7705d7a23dd58d0ebbf",
          "withoutMetadata": "bbd01c7d82c922a2775aede5fcb81200f50b18a6df969141bc97217660aae799",
          "linkedWithoutMetadata": "bbd01c7d82c922a2775aede5fcb81200f50b18a6df969141bc97217660aae799"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)",
          "getWinPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4160",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "playerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winnerList",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPool",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4160": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "672f37c8db2af7ea523687573ab067eaf010e376cb407e82628513f16bd80b8f",
          "withoutMetadata": "84119b29a94c0afe1225f20ae6f34c8ea72711d449bbf2db886145dcddc8a6ff",
          "linkedWithoutMetadata": "84119b29a94c0afe1225f20ae6f34c8ea72711d449bbf2db886145dcddc8a6ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4127",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4127": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "e6956de062d1e5e9f7183f5263daa11c1b2e7028353215982c6b556f41aa8e88",
          "withoutMetadata": "c99eaec6076d132aae4465243fc4ee63296756df2eb783d516b12f531f96e173",
          "linkedWithoutMetadata": "c99eaec6076d132aae4465243fc4ee63296756df2eb783d516b12f531f96e173"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4127",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4127": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "83d09d15abd2086f7eb90a08794c3f362d2b69bbd903f1ed8ab448da6d9e6f08",
          "withoutMetadata": "878d17bb65fc51cd9881d9dd7b92b9dafddd2a51472c0572e422c570018f542f",
          "linkedWithoutMetadata": "878d17bb65fc51cd9881d9dd7b92b9dafddd2a51472c0572e422c570018f542f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4129",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4129": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "1a9bb865f58495215cec6a6f7978abcf30ef711a615b20763b6fc039c824d906",
          "withoutMetadata": "8b62a5052f2f884079badbb6ac5e7e4b573cd4c4d3f922fc4dd2f0a9b073f69c",
          "linkedWithoutMetadata": "8b62a5052f2f884079badbb6ac5e7e4b573cd4c4d3f922fc4dd2f0a9b073f69c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4137",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4137": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "63d47a7d14d95547b64d8c21b97cf89b3158969b09dde7d3a2fcac047a83e6a8",
          "withoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a",
          "linkedWithoutMetadata": "12852a9ad43bc8482896f2a97485617549fe6853a0aba15b592813607fdf1c4a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "a86e564b059992eee493498c5d3084d023428a7b2741ef9b3cb3143cb92c290f",
          "withoutMetadata": "d140de12ed4956a3a6c09b4533a31b8d301062bf687072ccbbc84acd913eaa57",
          "linkedWithoutMetadata": "d140de12ed4956a3a6c09b4533a31b8d301062bf687072ccbbc84acd913eaa57"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4134",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4134": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "3e38e3249dbc9936d4a5e2fa3005d3a181ea6d21395c81fb2643cef44a2f5ad3",
          "withoutMetadata": "0e3e275832efcdac86160bda7026ac621ee9aba75a421378e9fd0e00cd305315",
          "linkedWithoutMetadata": "0e3e275832efcdac86160bda7026ac621ee9aba75a421378e9fd0e00cd305315"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "641a4a85ad72ef743a6df9dc2efefee98d507297fcec08cb5c6295802e8a3755",
          "withoutMetadata": "d140de12ed4956a3a6c09b4533a31b8d301062bf687072ccbbc84acd913eaa57",
          "linkedWithoutMetadata": "d140de12ed4956a3a6c09b4533a31b8d301062bf687072ccbbc84acd913eaa57"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4132",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4132": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "bfe72be1165cb7a3a6cf960c1f88aabb6a8969b62db04dcaa5b640d35ecd71ba",
          "withoutMetadata": "4cce5e7631fc67f7517b304cec45d5966167f9d1cab7550bcef4fdcd16da895d",
          "linkedWithoutMetadata": "4cce5e7631fc67f7517b304cec45d5966167f9d1cab7550bcef4fdcd16da895d"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "a86e564b059992eee493498c5d3084d023428a7b2741ef9b3cb3143cb92c290f",
          "withoutMetadata": "d140de12ed4956a3a6c09b4533a31b8d301062bf687072ccbbc84acd913eaa57",
          "linkedWithoutMetadata": "d140de12ed4956a3a6c09b4533a31b8d301062bf687072ccbbc84acd913eaa57"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4134",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4134": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "3e38e3249dbc9936d4a5e2fa3005d3a181ea6d21395c81fb2643cef44a2f5ad3",
          "withoutMetadata": "0e3e275832efcdac86160bda7026ac621ee9aba75a421378e9fd0e00cd305315",
          "linkedWithoutMetadata": "0e3e275832efcdac86160bda7026ac621ee9aba75a421378e9fd0e00cd305315"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "df45b7adf954c5ac6efa93eeb5730f8f5c54800735669970565d6bd6e5943c87",
          "withoutMetadata": "d140de12ed4956a3a6c09b4533a31b8d301062bf687072ccbbc84acd913eaa57",
          "linkedWithoutMetadata": "d140de12ed4956a3a6c09b4533a31b8d301062bf687072ccbbc84acd913eaa57"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4135",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4135": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "0da00cf8fc5b6ebd37a6b54e862544bfd230ea5d25b22d108be5a8ee81f0b57a",
          "withoutMetadata": "c99eaec6076d132aae4465243fc4ee63296756df2eb783d516b12f531f96e173",
          "linkedWithoutMetadata": "c99eaec6076d132aae4465243fc4ee63296756df2eb783d516b12f531f96e173"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4128",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4128": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "4145ffbbaca4bff66f9562a41287a82dd8ffd80e53af3138aaffa64861a208cf",
          "withoutMetadata": "d2263bab441f66320db8c4c93c269ed59c3f7e9fe0350f0644029ba4895845d9",
          "linkedWithoutMetadata": "d2263bab441f66320db8c4c93c269ed59c3f7e9fe0350f0644029ba4895845d9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4125",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4125": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "76accb0a09bd7a9231376dbfa4c49f3a8f6f60387f4081af36d1c46864bd44e9",
          "withoutMetadata": "9f633416cdf8bb8b46567ab196906f2cc133e01f44262d85e84aa6cfe1f0d73b",
          "linkedWithoutMetadata": "9f633416cdf8bb8b46567ab196906f2cc133e01f44262d85e84aa6cfe1f0d73b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4132",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4132": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "87d1b7a308e4216645c6c2834cf7a25a803457f763fcf8174be3aab80f4f72c1",
          "withoutMetadata": "ed14f7e5b0e0308517cae99f31f15ec9343d490a01b09a0656b0a31d5abd5cd4",
          "linkedWithoutMetadata": "ed14f7e5b0e0308517cae99f31f15ec9343d490a01b09a0656b0a31d5abd5cd4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4125",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4125": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "6166a184dd8889a8bfa1ffef0f48902d51dd9a157bcdf46dae9a387fead8b822",
          "withoutMetadata": "a4742449558768e99e5be3fa7be2ad2f24c74cb6890ecd80623fa92c31077cea",
          "linkedWithoutMetadata": "a4742449558768e99e5be3fa7be2ad2f24c74cb6890ecd80623fa92c31077cea"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4115",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4115": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "d078fa1d6f3e91d1ed2386c3b56ef734bf7baf7a40814025bbdf0b7c857f70b5",
          "withoutMetadata": "f2b6dcbbd8320cae388669a7dd03b3f9796d7d1b8ca5464015fe2d822104a2db",
          "linkedWithoutMetadata": "f2b6dcbbd8320cae388669a7dd03b3f9796d7d1b8ca5464015fe2d822104a2db"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4122",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4122": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "f3c7d21b788966bd766aefdb3deaf08b874bcf6778da36edfc17f2c1ee50e71e",
          "withoutMetadata": "d55d42817d5b21bde8d70c50d47a123e0ecf8a41beeb0155a65eee5f20dde020",
          "linkedWithoutMetadata": "d55d42817d5b21bde8d70c50d47a123e0ecf8a41beeb0155a65eee5f20dde020"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4128",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4128": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "6892da52a9987be089c8b29676b951953d3ddde952d07aa4f215d535975738f5",
          "withoutMetadata": "e868f1ac496960b085a60f1c1c009caa177e036a6b5e3733370f6740cca61e06",
          "linkedWithoutMetadata": "e868f1ac496960b085a60f1c1c009caa177e036a6b5e3733370f6740cca61e06"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4121",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4121": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "8e098ed5bdc3cebbbe5e36ac3c0e68af53bffd65a3c72200580f82be102cda20",
          "withoutMetadata": "ac92064e386cc02c6de80d10fab6c2adf07e427583d14bd662b9b0745d1d1c12",
          "linkedWithoutMetadata": "ac92064e386cc02c6de80d10fab6c2adf07e427583d14bd662b9b0745d1d1c12"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4123",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4123": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "6892da52a9987be089c8b29676b951953d3ddde952d07aa4f215d535975738f5",
          "withoutMetadata": "e868f1ac496960b085a60f1c1c009caa177e036a6b5e3733370f6740cca61e06",
          "linkedWithoutMetadata": "e868f1ac496960b085a60f1c1c009caa177e036a6b5e3733370f6740cca61e06"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4121",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4121": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "8e098ed5bdc3cebbbe5e36ac3c0e68af53bffd65a3c72200580f82be102cda20",
          "withoutMetadata": "ac92064e386cc02c6de80d10fab6c2adf07e427583d14bd662b9b0745d1d1c12",
          "linkedWithoutMetadata": "ac92064e386cc02c6de80d10fab6c2adf07e427583d14bd662b9b0745d1d1c12"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4123",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4123": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "3a7beba3e3f18242b96ae6910080be1261a5503e8909ea13decb04fb0566cb11",
          "withoutMetadata": "c72860d59a0912808a81ab2f8cceda7b01fb93e51fa5f49cb2854f2ea4c614b4",
          "linkedWithoutMetadata": "c72860d59a0912808a81ab2f8cceda7b01fb93e51fa5f49cb2854f2ea4c614b4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4116",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4116": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "468bd08ae065ed05b336f2e7f10926b2b432899a47070411aa8aa3c535e8762e",
          "withoutMetadata": "38821483de088a8d3dff1832c3370f88ee2dcee83254e1450dc0fc384dd1fb67",
          "linkedWithoutMetadata": "38821483de088a8d3dff1832c3370f88ee2dcee83254e1450dc0fc384dd1fb67"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4123",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4123": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "9e002b223149a35b73764404dbdf9f1b0f3d12c42ef9a7b21c982b55375e96d5",
          "withoutMetadata": "33a0312f50a16c81aa6e1cf4bd7865d805549172082dec4453cba4d94f794d22",
          "linkedWithoutMetadata": "33a0312f50a16c81aa6e1cf4bd7865d805549172082dec4453cba4d94f794d22"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4126",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4126": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "4035a265f6d24eb4f7573fa030d69da628c87623a1e138820ebbec1aa0f9e925",
          "withoutMetadata": "5f7137c77eb9c946f98ce12f78287fe8c3230b4f32da942e6f10b197e0acdb7d",
          "linkedWithoutMetadata": "5f7137c77eb9c946f98ce12f78287fe8c3230b4f32da942e6f10b197e0acdb7d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4124",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4124": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "9e002b223149a35b73764404dbdf9f1b0f3d12c42ef9a7b21c982b55375e96d5",
          "withoutMetadata": "33a0312f50a16c81aa6e1cf4bd7865d805549172082dec4453cba4d94f794d22",
          "linkedWithoutMetadata": "33a0312f50a16c81aa6e1cf4bd7865d805549172082dec4453cba4d94f794d22"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4126",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4126": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "468bd08ae065ed05b336f2e7f10926b2b432899a47070411aa8aa3c535e8762e",
          "withoutMetadata": "38821483de088a8d3dff1832c3370f88ee2dcee83254e1450dc0fc384dd1fb67",
          "linkedWithoutMetadata": "38821483de088a8d3dff1832c3370f88ee2dcee83254e1450dc0fc384dd1fb67"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getUserTVL(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4123",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:40"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:41"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3579",
              "src": "contracts/BetTokens.sol:49"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4123": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3547_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3547_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "winner",
                  "type": "t_bool"
                },
                {
                  "label": "rewarded",
                  "type": "t_bool"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3579": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "870dd0ec648cfc12bcd76914852fe835bb32f5065e4087e805b9aa9dd5f925d5",
          "withoutMetadata": "d13b0aedc4842e77e22512de7f92773f4353dde3a54e73b6a7814631674fbb0d",
          "linkedWithoutMetadata": "d13b0aedc4842e77e22512de7f92773f4353dde3a54e73b6a7814631674fbb0d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address,bool)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4036",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4036": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "43793ab76fbd26777234423ed7c5219e36fdfd7d83a80b5ee0a49dd1b2018132",
          "withoutMetadata": "edfe987632614358caee26d9e883d2208d83d76714c9d3a6ef8c53423adcf1c4",
          "linkedWithoutMetadata": "edfe987632614358caee26d9e883d2208d83d76714c9d3a6ef8c53423adcf1c4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4038",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4038": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "d9125a2ee4d77085d5e25db113bc6c9d26d8cb26d755d77e8a9468276b6dbd14",
          "withoutMetadata": "2957e494b7564adb5260f86141fdeebc11fbe4c0e240b5c7f9d1c4ab4ce4d3fe",
          "linkedWithoutMetadata": "2957e494b7564adb5260f86141fdeebc11fbe4c0e240b5c7f9d1c4ab4ce4d3fe"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4052",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4052": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "1d946470f0be6d76c0337e54c3299785f560050f640ad44f6fbff7f7e1d3c562",
          "withoutMetadata": "4bd9868d4d75ada87940f1f0f7538458d66bcefaea1312adffef6f0a9d911acd",
          "linkedWithoutMetadata": "4bd9868d4d75ada87940f1f0f7538458d66bcefaea1312adffef6f0a9d911acd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4050",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4050": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "b28bf70b87c01ba8655d7eec75998781894972b66f56d2dc25c1d7ae9140ebb5",
          "withoutMetadata": "edfe987632614358caee26d9e883d2208d83d76714c9d3a6ef8c53423adcf1c4",
          "linkedWithoutMetadata": "edfe987632614358caee26d9e883d2208d83d76714c9d3a6ef8c53423adcf1c4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4038",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4038": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "1d946470f0be6d76c0337e54c3299785f560050f640ad44f6fbff7f7e1d3c562",
          "withoutMetadata": "4bd9868d4d75ada87940f1f0f7538458d66bcefaea1312adffef6f0a9d911acd",
          "linkedWithoutMetadata": "4bd9868d4d75ada87940f1f0f7538458d66bcefaea1312adffef6f0a9d911acd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4050",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4050": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "67c38f767d79dfb51a3e22da36b2db26c05ddbd6cb805a18bc4ef059e38dd7ab",
          "withoutMetadata": "43ad52912475ecc291012aa2c854c56e7be8eb684c563e5ccc70f7520b8b1ed8",
          "linkedWithoutMetadata": "43ad52912475ecc291012aa2c854c56e7be8eb684c563e5ccc70f7520b8b1ed8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4052",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4052": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "a3dc827e4bce118013c978a5346a24538972da9af7a1d69f2ad501236bfcc33c",
          "withoutMetadata": "980096bd60c413d72c092546d4a6e5e393c0afe607cb0258628dfec51989e99c",
          "linkedWithoutMetadata": "980096bd60c413d72c092546d4a6e5e393c0afe607cb0258628dfec51989e99c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4044",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4044": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "7bbe8841c857541591c0006194ab4b70c9a61183b90f80ccf6e9ff4e5d1d191b",
          "withoutMetadata": "7f7d6ef48439b1b6a8415a669daf150849c5fc22851a87b4a02dd05398f412e5",
          "linkedWithoutMetadata": "7f7d6ef48439b1b6a8415a669daf150849c5fc22851a87b4a02dd05398f412e5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4039",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4039": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "9c23b44b4d1864f13d1193c1e75406f4b034282f407909af8da9431560344418",
          "withoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565",
          "linkedWithoutMetadata": "5431e82e3ada30abfc83ee9771c98490e692fdae8a157e56e37c632e556be565"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "ffb49418eda036aa881a938e94f5f301c861bb94686efa2df6817cf6a2864f3a",
          "withoutMetadata": "7f7d6ef48439b1b6a8415a669daf150849c5fc22851a87b4a02dd05398f412e5",
          "linkedWithoutMetadata": "7f7d6ef48439b1b6a8415a669daf150849c5fc22851a87b4a02dd05398f412e5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4039",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4039": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "553a1c7b99f261b536927e7a127519e19af2810eea62782e475b28966146c6c1",
          "withoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a",
          "linkedWithoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "06adc546678fad6468f8c35590d469025baa1240f20d8df5fed4f0a5172f2096",
          "withoutMetadata": "2303633f010505ddd2387314dd2c9fbe3f955a4cdf315c3f8d27ab397efc0b50",
          "linkedWithoutMetadata": "2303633f010505ddd2387314dd2c9fbe3f955a4cdf315c3f8d27ab397efc0b50"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4042",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4042": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "553a1c7b99f261b536927e7a127519e19af2810eea62782e475b28966146c6c1",
          "withoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a",
          "linkedWithoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "b1726cf665e10533be97855d9e473a248edb2471ead67ac09a1482d9bff8319d",
          "withoutMetadata": "7a0b2cf81e80ba37c8a311df8e9822a8f9a02f8afa7a7e902267e344c80cc91a",
          "linkedWithoutMetadata": "7a0b2cf81e80ba37c8a311df8e9822a8f9a02f8afa7a7e902267e344c80cc91a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4036",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4036": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "553a1c7b99f261b536927e7a127519e19af2810eea62782e475b28966146c6c1",
          "withoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a",
          "linkedWithoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "99a95ec7e9378bc14f6573ae3b12e986966c88917848706bd3faee9ae4f958d8",
          "withoutMetadata": "7205ebe525ca219cc6532490045de9c83a5cd127e020be06176120a807a2d108",
          "linkedWithoutMetadata": "7205ebe525ca219cc6532490045de9c83a5cd127e020be06176120a807a2d108"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4024",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4024": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "553a1c7b99f261b536927e7a127519e19af2810eea62782e475b28966146c6c1",
          "withoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a",
          "linkedWithoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "35a0f1d12a2c32a404b872489e4606d444edad1b4540f8021f641afce028ade5",
          "withoutMetadata": "eb18cbdbda094ec568980a08b5f41df5a05d8daad5be2e4ec1a32a0e537eff14",
          "linkedWithoutMetadata": "eb18cbdbda094ec568980a08b5f41df5a05d8daad5be2e4ec1a32a0e537eff14"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4013",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4013": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "553a1c7b99f261b536927e7a127519e19af2810eea62782e475b28966146c6c1",
          "withoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a",
          "linkedWithoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "c3eae8c616953dd9e6421c2016bfce78d12a9212dff6da36ecf1023d31c0f6bf",
          "withoutMetadata": "1edcb05e70dee15cd988690034600bb8f8862bfa9df8c51025c250aab4e1a399",
          "linkedWithoutMetadata": "1edcb05e70dee15cd988690034600bb8f8862bfa9df8c51025c250aab4e1a399"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4002",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4002": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "553a1c7b99f261b536927e7a127519e19af2810eea62782e475b28966146c6c1",
          "withoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a",
          "linkedWithoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "35a0f1d12a2c32a404b872489e4606d444edad1b4540f8021f641afce028ade5",
          "withoutMetadata": "eb18cbdbda094ec568980a08b5f41df5a05d8daad5be2e4ec1a32a0e537eff14",
          "linkedWithoutMetadata": "eb18cbdbda094ec568980a08b5f41df5a05d8daad5be2e4ec1a32a0e537eff14"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "token",
              "type": "t_contract(DeBeToken)4013",
              "src": "contracts/BetTokens.sol:17"
            },
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:37"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:38"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:39"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3575",
              "src": "contracts/BetTokens.sol:47"
            }
          ],
          "types": {
            "t_contract(DeBeToken)4013": {
              "label": "contract DeBeToken"
            },
            "t_mapping(t_address,t_struct(PlayersStruct)3543_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3543_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)3575": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/DeBeToken.sol:11",
        "version": {
          "withMetadata": "553a1c7b99f261b536927e7a127519e19af2810eea62782e475b28966146c6c1",
          "withoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a",
          "linkedWithoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/DeBeToken.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "72265b3d6d7ba688e23525d2d97171a200367bac146f8d3d18f153812aa216f6",
          "withoutMetadata": "a4e67cbc634fc665328f5e6d1c832d42f12731017e110e7471f304c2553bce98",
          "linkedWithoutMetadata": "a4e67cbc634fc665328f5e6d1c832d42f12731017e110e7471f304c2553bce98"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)877_storage)",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:27"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "dappToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)924",
              "src": "contracts/BetTokens.sol:46"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)877_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)877_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            },
            "t_enum(LOTTERY_STATE)924": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:15",
        "version": {
          "withMetadata": "3dbf364d8ad9246a975acf40b1456e81e28ac3d3a52768e3867619fb0715c8d5",
          "withoutMetadata": "a4e67cbc634fc665328f5e6d1c832d42f12731017e110e7471f304c2553bce98",
          "linkedWithoutMetadata": "a4e67cbc634fc665328f5e6d1c832d42f12731017e110e7471f304c2553bce98"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)877_storage)",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:27"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "dappToken",
              "type": "t_contract(IERC20)770",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)924",
              "src": "contracts/BetTokens.sol:46"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)877_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)877_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)770": {
              "label": "contract IERC20"
            },
            "t_enum(LOTTERY_STATE)924": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "116c7443a9f9447bf256dc5629e5cbdbd5dd57d29790a0445f1f265dd8ac9377",
          "withoutMetadata": "b24c6c9add547ba578195e5d36f4023dd4490c08d3eae563cad12514fc5daab2",
          "linkedWithoutMetadata": "b24c6c9add547ba578195e5d36f4023dd4490c08d3eae563cad12514fc5daab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "710b0258317b1d7fc3c298c9ff248eb279298f691c31285cb89f96057da8cb4f",
          "withoutMetadata": "778a0fb73307208c478ca264fca74754209e452c645eeaca3294d6c0044ed3e7",
          "linkedWithoutMetadata": "778a0fb73307208c478ca264fca74754209e452c645eeaca3294d6c0044ed3e7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "6f72cd925c2614628ea8b3f917a1053024c22bc0f009190faa512fb960e46b1a",
          "withoutMetadata": "6df22cd1610d57483f53c3ec28d3e3f49bf3248e34aea29ba8200c951ee7c145",
          "linkedWithoutMetadata": "6df22cd1610d57483f53c3ec28d3e3f49bf3248e34aea29ba8200c951ee7c145"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "ced6649f1a9319ceb4b6f365564fe583f0a7143411bf9b32575a7b92812a6412",
          "withoutMetadata": "25ff97f08d45ab37efc28e8d183749b0b12527cdca321443fd03c8b1590dae01",
          "linkedWithoutMetadata": "25ff97f08d45ab37efc28e8d183749b0b12527cdca321443fd03c8b1590dae01"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "4d0b81aef3ab4bcfd236cb204e9a57c11a4568e7c54c14ef19881c8d45aff244",
          "withoutMetadata": "619e275be5e3be85dc00dc957f1598359a13057bcde3d963195718c1ef036cf3",
          "linkedWithoutMetadata": "619e275be5e3be85dc00dc957f1598359a13057bcde3d963195718c1ef036cf3"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "710b0258317b1d7fc3c298c9ff248eb279298f691c31285cb89f96057da8cb4f",
          "withoutMetadata": "778a0fb73307208c478ca264fca74754209e452c645eeaca3294d6c0044ed3e7",
          "linkedWithoutMetadata": "778a0fb73307208c478ca264fca74754209e452c645eeaca3294d6c0044ed3e7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "6d78f8f0ae9646054401c9c802528abe7ef5446a8f0c65c20d4293ff6282c396",
          "withoutMetadata": "447e2a27613e9cae113d0139c2080c41e48c8656a505d804094f7ea9faa78365",
          "linkedWithoutMetadata": "447e2a27613e9cae113d0139c2080c41e48c8656a505d804094f7ea9faa78365"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "354d7da0fdc8c4986a4d54e334e35e19cf98ce02afde9866fccbed4f98b8bf36",
          "withoutMetadata": "447e2a27613e9cae113d0139c2080c41e48c8656a505d804094f7ea9faa78365",
          "linkedWithoutMetadata": "447e2a27613e9cae113d0139c2080c41e48c8656a505d804094f7ea9faa78365"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "69dc8461f0a8e5ce64a44e8b4a05343fc4f3290902688f6b44b6d20510ae5129",
          "withoutMetadata": "48f45527df3a17b625a9fd6b4cee6eeafbb95d863386337b4b22b2144fdbd91d",
          "linkedWithoutMetadata": "48f45527df3a17b625a9fd6b4cee6eeafbb95d863386337b4b22b2144fdbd91d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "fff2cd6f05a8ec1e01b264e4dad8c52d157ddbf4f9aeda1d36dad658bcadc3b1",
          "withoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8",
          "linkedWithoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "912c60037962c5c02441a64198bb5ff29a3370cd6e6230322916e001315ae5df",
          "withoutMetadata": "ee9115b89e5dcd285bc8f52aa1e02ac49174d9b368719d35eadbe1c319f7c9a7",
          "linkedWithoutMetadata": "ee9115b89e5dcd285bc8f52aa1e02ac49174d9b368719d35eadbe1c319f7c9a7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "2e6014bb06194c66664f1a27415b670eb8f7667e57c693a44d6661d58873ab4e",
          "withoutMetadata": "ee9115b89e5dcd285bc8f52aa1e02ac49174d9b368719d35eadbe1c319f7c9a7",
          "linkedWithoutMetadata": "ee9115b89e5dcd285bc8f52aa1e02ac49174d9b368719d35eadbe1c319f7c9a7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "f6a506a673da742bc3e877c87fb58992076496486b1465d23f3a332824b51135",
          "withoutMetadata": "16d7cf9d3061e277fc0004768f09ebb6e6037dde74d3be52cc31de8a64301386",
          "linkedWithoutMetadata": "16d7cf9d3061e277fc0004768f09ebb6e6037dde74d3be52cc31de8a64301386"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "fff2cd6f05a8ec1e01b264e4dad8c52d157ddbf4f9aeda1d36dad658bcadc3b1",
          "withoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8",
          "linkedWithoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "547ae1060485796dc9415c5dbbf73ba29a49ff0579d9eb00056e5c4f987fc8e2",
          "withoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8",
          "linkedWithoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "c7f2f0c2cde2e6d12ea6dbd4d89555773386dabe6f3311aa81ecac9a5a6f3f27",
          "withoutMetadata": "447e2a27613e9cae113d0139c2080c41e48c8656a505d804094f7ea9faa78365",
          "linkedWithoutMetadata": "447e2a27613e9cae113d0139c2080c41e48c8656a505d804094f7ea9faa78365"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "c8c475c57d5f82462ecd4386493a616b19bce95c8003c9c9c29ecc1079ad6c21",
          "withoutMetadata": "447e2a27613e9cae113d0139c2080c41e48c8656a505d804094f7ea9faa78365",
          "linkedWithoutMetadata": "447e2a27613e9cae113d0139c2080c41e48c8656a505d804094f7ea9faa78365"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "20894c31c257b5a1a26ba827631f423c9343a32cb7a350b46869613da15a02fc",
          "withoutMetadata": "447e2a27613e9cae113d0139c2080c41e48c8656a505d804094f7ea9faa78365",
          "linkedWithoutMetadata": "447e2a27613e9cae113d0139c2080c41e48c8656a505d804094f7ea9faa78365"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "2eb26946b095b44606218e6dba5853b10a716547be215dcffdfc5255ff773ea9",
          "withoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8",
          "linkedWithoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "778ea9ab6919cb64aa219a0309f1a9ac283cb4ca7d986124816a5737357632f1",
          "withoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8",
          "linkedWithoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "c2c1d1428645ea19a3a79fd4a2a66fdad280704a5842d1f0fc5299a4487ee7c2",
          "withoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8",
          "linkedWithoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "130982fb993e80dae2613768d1c885abdbff94dbbf44380a145c393624d8fcf8",
          "withoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8",
          "linkedWithoutMetadata": "e623cc28f69f6b0b9ae103dbf3b7b91ec88ce1c223953189804f6bebb92f77a8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "c187561cd528313df6d423356e5976c067d7313557c775c2133c6e3498f1a169",
          "withoutMetadata": "16d7cf9d3061e277fc0004768f09ebb6e6037dde74d3be52cc31de8a64301386",
          "linkedWithoutMetadata": "16d7cf9d3061e277fc0004768f09ebb6e6037dde74d3be52cc31de8a64301386"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "f79dc189fde5d0bfc0a89c3e94f21e6e704908572502d4e37a682b8c3e1f8d58",
          "withoutMetadata": "9e9f37f258a618e6f14e7384fe8496a359da2daf2735cb6b371a215bca40a712",
          "linkedWithoutMetadata": "9e9f37f258a618e6f14e7384fe8496a359da2daf2735cb6b371a215bca40a712"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)908",
              "src": "contracts/BetTokens.sol:42"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:45"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)908": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "29d295d7223614105816ac2ac3bef2460528bfaea56a9daf6c32f1487a2c634a",
          "withoutMetadata": "4ff1604e9bfed17ab9cac0f004a6ab78c0fed8e243517212017e5688ce6d8939",
          "linkedWithoutMetadata": "4ff1604e9bfed17ab9cac0f004a6ab78c0fed8e243517212017e5688ce6d8939"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)910",
              "src": "contracts/BetTokens.sol:43"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:44"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:45"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:48"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)910": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "a3bd77588b744f18de475bef00c8c4d4fbb71f4d3cd1486bf550098a08217bc8",
          "withoutMetadata": "4ff1604e9bfed17ab9cac0f004a6ab78c0fed8e243517212017e5688ce6d8939",
          "linkedWithoutMetadata": "4ff1604e9bfed17ab9cac0f004a6ab78c0fed8e243517212017e5688ce6d8939"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lottery",
            "src": "contracts/BetTokens.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)910",
              "src": "contracts/BetTokens.sol:43"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:44"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:45"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:48"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)910": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "8daa1330b3574696cda061e7c41cd0972cb0008178689db24eb6c905f2f72637",
          "withoutMetadata": "c4aa0a484a311b29d9988655aa55e553225971094813a1c1dde361f5dd5018df",
          "linkedWithoutMetadata": "c4aa0a484a311b29d9988655aa55e553225971094813a1c1dde361f5dd5018df"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "tokenIsAllowed(address)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "stakingBalance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "uniqueTokensStaked",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:28"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:29"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:30"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:31"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "allowedTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)910",
              "src": "contracts/BetTokens.sol:43"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:44"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:45"
            },
            {
              "contract": "Lottery",
              "label": "deBeToken",
              "type": "t_contract(ERC20)692",
              "src": "contracts/BetTokens.sol:48"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_enum(LOTTERY_STATE)910": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_contract(ERC20)692": {
              "label": "contract ERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:14",
        "version": {
          "withMetadata": "d0c99aa99064ad991373a688c194efce8126d5449d05a2bb224d9e2165dab052",
          "withoutMetadata": "0d16fae7aa5ea4ca5315ffd01cdc6a6bc9f8a5283268fd36275bf35719a9c611",
          "linkedWithoutMetadata": "0d16fae7aa5ea4ca5315ffd01cdc6a6bc9f8a5283268fd36275bf35719a9c611"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "mintAndBurnPrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)876_storage)",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:27"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)897",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:36"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:37"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)876_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)876_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)897": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "8bcb80d72beb51c7bc8eb7b30bba33dbf38a74bc5ad09cd85fb0a21b4e216f42",
          "withoutMetadata": "f5928e68a359992e770c767e867163ae64f5a595e9f9f30f8916f3b035ee1f1a",
          "linkedWithoutMetadata": "f5928e68a359992e770c767e867163ae64f5a595e9f9f30f8916f3b035ee1f1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "8e32317f4342fb033d3a634e7d7141f624f8977045fac8938f2a2adf90eff22a",
          "withoutMetadata": "89629fd96182b89882ab0014ca26088a41a770e48c60d45106a189f50a8beb46",
          "linkedWithoutMetadata": "89629fd96182b89882ab0014ca26088a41a770e48c60d45106a189f50a8beb46"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "75a35b9a9395e4a9cc6e43565de2be1796efce6594a3479d36bd08e44c428a96",
          "withoutMetadata": "f5a0a40d5ae04c8725b8b5a8fd0371b5ee352ddba51e8b44b0748081ac1dba43",
          "linkedWithoutMetadata": "f5a0a40d5ae04c8725b8b5a8fd0371b5ee352ddba51e8b44b0748081ac1dba43"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "5a1ca2c2c4895dca1411a10160273cb5d55f57391832466720e813a8844bbe7b",
          "withoutMetadata": "cfea69f05036dc5b47c10dd16a3acf69c123b4298af7227bd12fcfa6b403cd45",
          "linkedWithoutMetadata": "cfea69f05036dc5b47c10dd16a3acf69c123b4298af7227bd12fcfa6b403cd45"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "f127a0c2334764ec4fd3bddfcb341b52af3425e11a4282437a6aa26cb928c00a",
          "withoutMetadata": "7ed40c276029c487fd23c2520f2818ffbb77a26952c4adbf51d20444872284c3",
          "linkedWithoutMetadata": "7ed40c276029c487fd23c2520f2818ffbb77a26952c4adbf51d20444872284c3"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "08b8be7d2266773504dfce6396449cfb4063e6133be7985e553ae67079d460ea",
          "withoutMetadata": "24d9d8879dc361101ca18744f8c8036470d705c8ef186f8372aba3d1c57d30b0",
          "linkedWithoutMetadata": "24d9d8879dc361101ca18744f8c8036470d705c8ef186f8372aba3d1c57d30b0"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "97952e0bc15d3b50c31f782f95f39e95f6a78cf86f45b6e9412f99f93913d48f",
          "withoutMetadata": "35e75b32c899edd0ac0f4bfcc3b67b09b937faec245e8d5924e794a02b8b4277",
          "linkedWithoutMetadata": "35e75b32c899edd0ac0f4bfcc3b67b09b937faec245e8d5924e794a02b8b4277"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "9ce0a05894a313a060570f4ebd0af3324634caac397a8fad9f75deae1a779a13",
          "withoutMetadata": "1e04d8f50c6a01d064607689fdc47f56b8f4ced3f38a7a8466714ff7fbfd6eca",
          "linkedWithoutMetadata": "1e04d8f50c6a01d064607689fdc47f56b8f4ced3f38a7a8466714ff7fbfd6eca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "229808a00ca01f90cb2eea6dcf8d6b7cd0416793c6f7b362618e270ec1e9d80e",
          "withoutMetadata": "1e04d8f50c6a01d064607689fdc47f56b8f4ced3f38a7a8466714ff7fbfd6eca",
          "linkedWithoutMetadata": "1e04d8f50c6a01d064607689fdc47f56b8f4ced3f38a7a8466714ff7fbfd6eca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "9ce0a05894a313a060570f4ebd0af3324634caac397a8fad9f75deae1a779a13",
          "withoutMetadata": "1e04d8f50c6a01d064607689fdc47f56b8f4ced3f38a7a8466714ff7fbfd6eca",
          "linkedWithoutMetadata": "1e04d8f50c6a01d064607689fdc47f56b8f4ced3f38a7a8466714ff7fbfd6eca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "9168f04100c2c1b57555b158dd9c75d539496cfae31ab0b697560c2268982f75",
          "withoutMetadata": "1e04d8f50c6a01d064607689fdc47f56b8f4ced3f38a7a8466714ff7fbfd6eca",
          "linkedWithoutMetadata": "1e04d8f50c6a01d064607689fdc47f56b8f4ced3f38a7a8466714ff7fbfd6eca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "af5aad3541e40d5f6a6b7ae2e2da7503f74d70d977874aee80543874ff266cdb",
          "withoutMetadata": "c366ca5d5952d5e715d399b1d5abb9431496788fddd97dc0f3c72e3f32d32f5d",
          "linkedWithoutMetadata": "c366ca5d5952d5e715d399b1d5abb9431496788fddd97dc0f3c72e3f32d32f5d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "05bcdfc8bae184e02ce1765d2e33f1f1d99c54665870efc5807d1d7f6f0d7a40",
          "withoutMetadata": "5f5381c142d6615a134e3770e7c9f39a743ad1cefc0a67997b023ad39900094f",
          "linkedWithoutMetadata": "5f5381c142d6615a134e3770e7c9f39a743ad1cefc0a67997b023ad39900094f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "f286f085a935a11f759eeb2d385c6b051fbeddcecd36e2fd8610f128571c5541",
          "withoutMetadata": "5f5381c142d6615a134e3770e7c9f39a743ad1cefc0a67997b023ad39900094f",
          "linkedWithoutMetadata": "5f5381c142d6615a134e3770e7c9f39a743ad1cefc0a67997b023ad39900094f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "2a571634adc2e0b3a2fff3a56d8ae7d1b1046fdc27941221a277f800e293949b",
          "withoutMetadata": "30dae15f6cd75f80bfba000596e6bbdcd1de837ca1fe24c9438a49d2cd31895d",
          "linkedWithoutMetadata": "30dae15f6cd75f80bfba000596e6bbdcd1de837ca1fe24c9438a49d2cd31895d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "b875d0cbbc0ba336ad8332ece398b3580acc00d786f5b9df41738af8a163c613",
          "withoutMetadata": "4be77f23157385cba4273a8c1531b37e8138914203398158ca165b5e496b1bef",
          "linkedWithoutMetadata": "4be77f23157385cba4273a8c1531b37e8138914203398158ca165b5e496b1bef"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "weiMultiplier",
            "src": "contracts/BetTokens.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "weiMultiplier",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:26"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)168",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:35"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:36"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)168": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "f286f085a935a11f759eeb2d385c6b051fbeddcecd36e2fd8610f128571c5541",
          "withoutMetadata": "5f5381c142d6615a134e3770e7c9f39a743ad1cefc0a67997b023ad39900094f",
          "linkedWithoutMetadata": "5f5381c142d6615a134e3770e7c9f39a743ad1cefc0a67997b023ad39900094f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "995e2db23fe7fb75d91cc5b3fdccfb0031fc89377dd0e74cd6eba201e9e2e780",
          "withoutMetadata": "b0e50a29aed3b5f7298efd2fd4707443e5e32c112d57b25710e552c4ec773c57",
          "linkedWithoutMetadata": "b0e50a29aed3b5f7298efd2fd4707443e5e32c112d57b25710e552c4ec773c57"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "a9ade4ffa1608e4e75dcc84c362eb6c4fba13e15e093d389664f0f36a33bec76",
          "withoutMetadata": "bb3dd99eae58d523ead945d7ba7e0e8a6fa2601151ecfb7bd16cd41a9160e387",
          "linkedWithoutMetadata": "bb3dd99eae58d523ead945d7ba7e0e8a6fa2601151ecfb7bd16cd41a9160e387"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "833e6cb2f955c501ccc1a6231646804517ffdafbc1f70e6ec1fdde2ae2e66be9",
          "withoutMetadata": "c001932a9c46f85500d9e8735e3da1cc1f26044a10647c015fc22bd06112c342",
          "linkedWithoutMetadata": "c001932a9c46f85500d9e8735e3da1cc1f26044a10647c015fc22bd06112c342"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "34efb608cf0e98164cde2ac687b9d22e4ecd634421debbd086e8b1ad99685f40",
          "withoutMetadata": "a31fa232d0bf9e8791d726a8ef6bdb1695a411f53393cd1dd2cf4c0a9488bd85",
          "linkedWithoutMetadata": "a31fa232d0bf9e8791d726a8ef6bdb1695a411f53393cd1dd2cf4c0a9488bd85"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "73f49f496d418794b7d06415eb89321694480d7f5f508e815d66623e9387979c",
          "withoutMetadata": "d76f27eb62a32b74adf967c78d3d50ea90b4b831042de01c7f9da0f940a494d5",
          "linkedWithoutMetadata": "d76f27eb62a32b74adf967c78d3d50ea90b4b831042de01c7f9da0f940a494d5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "6c7f17800ac2ea8edcbb01fb1e1897fa2df2e4d21f9e35cc580c7bd72fc65209",
          "withoutMetadata": "5826129273efef7a683a6b36b604b425e9aa06721bd635421af914b8daace088",
          "linkedWithoutMetadata": "5826129273efef7a683a6b36b604b425e9aa06721bd635421af914b8daace088"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "428ba9f2484532dd2edbb2465098a5ed716fdae39d79e04694471a22e4a3c23c",
          "withoutMetadata": "d3a91d5a5c30a4ed7a8dbea86c17bd6bb206d653e2dc848e56f015dab47b48de",
          "linkedWithoutMetadata": "d3a91d5a5c30a4ed7a8dbea86c17bd6bb206d653e2dc848e56f015dab47b48de"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "8aec598fb0632269e8de845799636dbf6967d7a6d8aa98eb409f3f564a294e32",
          "withoutMetadata": "9a406618e5f4793db539ad479b06b18e38ae8e5e005aa7d6ed303e7818091030",
          "linkedWithoutMetadata": "9a406618e5f4793db539ad479b06b18e38ae8e5e005aa7d6ed303e7818091030"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "31e65d1c9066ed12b2d66c4cc8cf745121f11fb86fdee4df7a07c53f23ebd756",
          "withoutMetadata": "8824e42cd008631a65f8894abea123612b09ccaa0759b9dc096ba6150e102a33",
          "linkedWithoutMetadata": "8824e42cd008631a65f8894abea123612b09ccaa0759b9dc096ba6150e102a33"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "f9ece5edc50d688cce82fa80e85af2170032c3274cba73183c619147aebb0669",
          "withoutMetadata": "3d7c245b19e68c2271e7daea8d88fd072b075f6d94fc2ddb6914fa58186ca117",
          "linkedWithoutMetadata": "3d7c245b19e68c2271e7daea8d88fd072b075f6d94fc2ddb6914fa58186ca117"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "e5ee071c83bbfc8997b1fb1106b3fc0d011a9a62939a964e58b78272315a0455",
          "withoutMetadata": "bb04a3842b594b752a8b93d2c63524a01703cbbe66589c9c5f695e131202f5f8",
          "linkedWithoutMetadata": "bb04a3842b594b752a8b93d2c63524a01703cbbe66589c9c5f695e131202f5f8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "12a0cb1323cf83d9bf72de364a60a8439e050fda88989dde609450707fe25677",
          "withoutMetadata": "48de7086545e7a8bf6230bdbe08302086dc4957d14fc1d73c04c60cc747cf0f7",
          "linkedWithoutMetadata": "48de7086545e7a8bf6230bdbe08302086dc4957d14fc1d73c04c60cc747cf0f7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "7580fa2efe81cf533513cf9a54e94dc3e9f8ec67afa6b1930175e873539607df",
          "withoutMetadata": "48de7086545e7a8bf6230bdbe08302086dc4957d14fc1d73c04c60cc747cf0f7",
          "linkedWithoutMetadata": "48de7086545e7a8bf6230bdbe08302086dc4957d14fc1d73c04c60cc747cf0f7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "9c608a76722e52f268b1a227332dfe2147276f100e238cc3ffd38d17e4bed7f8",
          "withoutMetadata": "bb04a3842b594b752a8b93d2c63524a01703cbbe66589c9c5f695e131202f5f8",
          "linkedWithoutMetadata": "bb04a3842b594b752a8b93d2c63524a01703cbbe66589c9c5f695e131202f5f8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "1f7474106ef3db694a8bb0071246d09cf5c800e52fe8b0cfd4b380b045922fee",
          "withoutMetadata": "b9c2e8ed018bbeffe252d7475afd704ff7bab0a1c07307e4d8446ebcc9b64aec",
          "linkedWithoutMetadata": "b9c2e8ed018bbeffe252d7475afd704ff7bab0a1c07307e4d8446ebcc9b64aec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "ae0b6d09ea6d3b862283abbd6b0e36934531093568f27dc289c52d032b2592a8",
          "withoutMetadata": "b9c2e8ed018bbeffe252d7475afd704ff7bab0a1c07307e4d8446ebcc9b64aec",
          "linkedWithoutMetadata": "b9c2e8ed018bbeffe252d7475afd704ff7bab0a1c07307e4d8446ebcc9b64aec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "5f01e2f6817b70dd2905b6894973a0b368e12a0918503a51f8915dd495a816b9",
          "withoutMetadata": "b9c2e8ed018bbeffe252d7475afd704ff7bab0a1c07307e4d8446ebcc9b64aec",
          "linkedWithoutMetadata": "b9c2e8ed018bbeffe252d7475afd704ff7bab0a1c07307e4d8446ebcc9b64aec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "144fe94969b004e75cbbffb39915a148bd4d4a338ef2a1eb560fafc394d741f0",
          "withoutMetadata": "b9c2e8ed018bbeffe252d7475afd704ff7bab0a1c07307e4d8446ebcc9b64aec",
          "linkedWithoutMetadata": "b9c2e8ed018bbeffe252d7475afd704ff7bab0a1c07307e4d8446ebcc9b64aec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "1ff9f05c791a4caca711132ebc68d5c71f91bdc671f96ed3a7b520f98fead0a7",
          "withoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648",
          "linkedWithoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "8ea0a0a297d64d9d6f51e9d3433434bacc424d1802543c534f97410dc96c9679",
          "withoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648",
          "linkedWithoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "f84e272c3052278c749d21a81be2b21ee4938d97ce3ca36c096d8c4636e1ec67",
          "withoutMetadata": "38dd1b6dd6a3555b8411dd7a24b36aaed3bc2ae03bd73af84990ee17eba3872d",
          "linkedWithoutMetadata": "38dd1b6dd6a3555b8411dd7a24b36aaed3bc2ae03bd73af84990ee17eba3872d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "8ea0a0a297d64d9d6f51e9d3433434bacc424d1802543c534f97410dc96c9679",
          "withoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648",
          "linkedWithoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "4fff11219522b784b57f9aa5266a27cd46f93dc3e637843c1c2365132bdaec2b",
          "withoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648",
          "linkedWithoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "7e4de227e71992580d66e08aa2f12fce322b02510b2e3593c6686c7c8886ef5c",
          "withoutMetadata": "cce9e6409c617825bef05e71bb3b4e429180e21d59e6dbf053f6fd9f24c5473f",
          "linkedWithoutMetadata": "cce9e6409c617825bef05e71bb3b4e429180e21d59e6dbf053f6fd9f24c5473f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "a26e1860c3ceb964ab94b2a7cd5e5bb9f3a05ae4f3ce8790911930c4e429d037",
          "withoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648",
          "linkedWithoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "a4204be7612c7f9f953be699c7e6773a0b96e3550c38db6371078975037d5dff",
          "withoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648",
          "linkedWithoutMetadata": "8b42a358cfe984985f9a51076251a4421e56f3298e814feaf96f70e387f6c648"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "eb2b8176d81fdd45da0baf4a5597490f5a9f6604de06858ada78a5256f0426f4",
          "withoutMetadata": "d3edd6a2e13a345a4bef30a9c72cc639ad7628a0d79e6ddeb508ac277f562b94",
          "linkedWithoutMetadata": "d3edd6a2e13a345a4bef30a9c72cc639ad7628a0d79e6ddeb508ac277f562b94"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "calculatePrize()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "winPrize",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "totalValueLocked",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:25"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)160",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:34"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)160": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "207881ca1918c345792eb613c66c6530b8a91f7cc342b94879d52bfa00ea1ccb",
          "withoutMetadata": "34e3c25a61c8c45fb40264316769906a0d98c924df286fffe1ad9301c6e47720",
          "linkedWithoutMetadata": "34e3c25a61c8c45fb40264316769906a0d98c924df286fffe1ad9301c6e47720"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "closeLottery()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "betValue",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)158",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:34"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)158": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "d0494bb5fbe1f5be8564c9532ec6d73b25e4e19e4ced63a2a78f95722de642e7",
          "withoutMetadata": "ec79fdca01c83daed06c4397bc5edf00f2dc492380482bdf205762906f8a554c",
          "linkedWithoutMetadata": "ec79fdca01c83daed06c4397bc5edf00f2dc492380482bdf205762906f8a554c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "betValue",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)158",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:34"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)158": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "8570f3bef7bb2ecf3214c1ca1c3d080bb663284cf75b2832005e8050875c7a34",
          "withoutMetadata": "0a6b9b8923c7358706807abb3a4ade49d816f3e33085be5cdeb144711e4a4c45",
          "linkedWithoutMetadata": "0a6b9b8923c7358706807abb3a4ade49d816f3e33085be5cdeb144711e4a4c45"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "betValue",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)158",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:34"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)158": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "4994589c78df589cd3784fc98f16d081a7bc147b0827186f255695a38f2b6920",
          "withoutMetadata": "0a6b9b8923c7358706807abb3a4ade49d816f3e33085be5cdeb144711e4a4c45",
          "linkedWithoutMetadata": "0a6b9b8923c7358706807abb3a4ade49d816f3e33085be5cdeb144711e4a4c45"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "betValue",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)158",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:34"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)158": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "936b27f71bd3e534e9569096e584a3b8138c2e56b77d9daab8222891e6c16114",
          "withoutMetadata": "ae3c843c610984f101a3ca6f7274b4b9c2b951877292048a4180cf4b9dbf40e0",
          "linkedWithoutMetadata": "ae3c843c610984f101a3ca6f7274b4b9c2b951877292048a4180cf4b9dbf40e0"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "betValue",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)158",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:34"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)158": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "68db13b3473ad3afc22e2ee781574fcfd287f070747f139427bcaf8859f16797",
          "withoutMetadata": "ebe4d0576ad1a29e0e33632bfc559837ecdbe2d70ebefd7730cd474794d338ba",
          "linkedWithoutMetadata": "ebe4d0576ad1a29e0e33632bfc559837ecdbe2d70ebefd7730cd474794d338ba"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "betValue",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)158",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:34"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)158": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "27d9ae7da867735229ce0eeee60bc28134bae1df695106e0d91c1d1351fbb107",
          "withoutMetadata": "f9aa38adaeb57291d7016059828f9f441c345e7b81a687aedfa4903423efe93e",
          "linkedWithoutMetadata": "f9aa38adaeb57291d7016059828f9f441c345e7b81a687aedfa4903423efe93e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)139_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "betValue",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)158",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:34"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)139_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)139_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)158": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "08295699790c674c5574539ced5280dbb163cab91795b07eb9175feafd7c5c02",
          "withoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448",
          "linkedWithoutMetadata": "7e7a4d2dea64835b308c8a359c3029d74988a4318ba8ef4240ab30513edfd448"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)915_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)915_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)2200_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)915_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)915_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1237_storage)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1237_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1237_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)1237_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2200_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2200_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2200_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "c63b9a05c6e5fe02f388b4da8e22c2d8f974958402bd2b73892292bf04e5d33b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "67faaf5c5e9ea273d54d23c38ba720edf103d73bda6fc0bae7971cb6e4a600c0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "bcf116a9950926cc5c5c5e2975657bbaa8670053bdba022e30fb79e04d685d35",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "3edb1d0095a00822c259427c75de307f81247d17bc22ed7ca509a44dd1b853b1",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "dbf97eb47f28e3888405a835a93e89d2430696803356f8cf60a1cccddaa68b63",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "3ffa0a23973a7a37736fe71129706df5375c02e10093d66f9bc1be57382d66cb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Lottery": {
        "src": "contracts/BetTokens.sol:12",
        "version": {
          "withMetadata": "f1905891490e801c866ff2dbd5346a2eae1273cda0045f3eb76501cf2e12442e",
          "withoutMetadata": "a2f44721b6ee2b8ad9fb818b8fc52f1c657e44ca894ea0ca45f47d2a3fad9262",
          "linkedWithoutMetadata": "a2f44721b6ee2b8ad9fb818b8fc52f1c657e44ca894ea0ca45f47d2a3fad9262"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "enterLottery(address,uint256,string)",
          "getEntranceFee(uint256)",
          "startLottery()",
          "endLottery()",
          "getWinners(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Lottery",
              "label": "balances",
              "type": "t_mapping(t_address,t_struct(PlayersStruct)3526_storage)",
              "src": "contracts/BetTokens.sol:19"
            },
            {
              "contract": "Lottery",
              "label": "players",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:21"
            },
            {
              "contract": "Lottery",
              "label": "winners",
              "type": "t_array(t_address_payable)dyn_storage",
              "src": "contracts/BetTokens.sol:22"
            },
            {
              "contract": "Lottery",
              "label": "entryFee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:23"
            },
            {
              "contract": "Lottery",
              "label": "betValue",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:24"
            },
            {
              "contract": "Lottery",
              "label": "lottery_state",
              "type": "t_enum(LOTTERY_STATE)3545",
              "src": "contracts/BetTokens.sol:32"
            },
            {
              "contract": "Lottery",
              "label": "fee",
              "type": "t_uint256",
              "src": "contracts/BetTokens.sol:33"
            },
            {
              "contract": "Lottery",
              "label": "keyhash",
              "type": "t_bytes32",
              "src": "contracts/BetTokens.sol:34"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(PlayersStruct)3526_storage)": {
              "label": "mapping(address => struct Lottery.PlayersStruct)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PlayersStruct)3526_storage": {
              "label": "struct Lottery.PlayersStruct",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "betOnThis",
                  "type": "t_string_storage"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_enum(LOTTERY_STATE)3545": {
              "label": "enum Lottery.LOTTERY_STATE",
              "members": [
                "OPEN",
                "CLOSED",
                "CALCULATING_WINNER"
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DeBeToken": {
        "src": "contracts/Token.sol:11",
        "version": {
          "withMetadata": "53bcec46c18c569522325a844579d731efbf293986cb6bca6c79b5eff0501832",
          "withoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a",
          "linkedWithoutMetadata": "7efdf62870982cdfba6a9e59df24145b84f5bc00c5ba9faf69d706616d0fd04a"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "Ownable",
          "ERC20Snapshot",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "snapshot()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeBeToken",
            "src": "contracts/Token.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "beae05454d6c24b0af2926d3f12cbd62c3db4a4f7dff423bd7ff2ddbe2972f20",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}